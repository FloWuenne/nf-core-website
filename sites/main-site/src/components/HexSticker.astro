---
interface Props {
    imageUrl: string;
    alt: string;
    category?: string;
    link?: string;
}

const { imageUrl, alt, category = "uncategorized", link } = Astro.props;

// Create light mode URL variant by replacing -dark with -light in the filename
const lightModeUrl = imageUrl.replace("-dark.png", "-light.png");
---

<a
    href={link}
    class="hex-container"
    data-category={category}
    target="_blank"
    rel="noopener noreferrer"
>
    <div class="hex-sticker">
        <img src={imageUrl} alt={alt} class="dark-mode-img" />
        <img src={lightModeUrl} alt={alt} class="light-mode-img" />
    </div>
</a>

<style>
    .hex-container {
        perspective: 1000px;
        margin: var(--hex-margin, 0.5rem);
        cursor: pointer;
        text-decoration: none;
        transform-origin: center center;
        display: inline-block;
    }

    .hex-sticker {
        width: var(--hex-size, 150px);
        height: calc(var(--hex-size, 150px) * 1.1547); /* Hexagon height ratio */
        position: relative;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        background: transparent;
        transform-origin: center center;
        will-change: transform;
        clip-path: polygon(0% 25%, 0% 75%, 50% 100%, 100% 75%, 100% 25%, 50% 0%);
        overflow: hidden;
    }

    .hex-sticker img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        background: transparent;
        transform-origin: center center;
        will-change: transform;
        transition: transform 0.3s ease-in-out;
        position: absolute;
        top: 0;
        left: 0;
    }

    /* Show/hide images based on theme */
    .light-mode-img {
        display: none;
    }

    .dark-mode-img {
        display: block;
    }

    :global(body.light-mode) .light-mode-img {
        display: block;
    }

    :global(body.light-mode) .dark-mode-img {
        display: none;
    }

    .hex-container:hover .hex-sticker {
        transform: perspective(1000px) rotateX(10deg) rotateY(10deg);
        filter: brightness(1.1) contrast(1.4) saturate(1.6) drop-shadow(0 0 20px rgba(255, 255, 255, 0.3));
    }

    /* Light mode effect */
    :global(.light-mode) .hex-container:hover .hex-sticker {
        filter: brightness(1.1) contrast(1.4) saturate(1.6)
               drop-shadow(0 0 12px rgba(0, 255, 255, 0.6))
               drop-shadow(0 0 18px rgba(255, 0, 150, 0.5))
               drop-shadow(0 0 25px rgba(255, 255, 0, 0.5));
    }

    /* Holographic effect for light mode */
    :global(.light-mode) .hex-sticker::before {
        content: "";
        position: absolute;
        top: -50%;
        left: -50%;
        width: 200%;
        height: 200%;
        background: linear-gradient(
            135deg,
            rgba(255, 0, 150, 0.8),
            rgba(0, 255, 255, 0.8),
            rgba(0, 150, 255, 0.8),
            rgba(255, 255, 0, 0.8),
            rgba(255, 0, 150, 0.8)
        );
        background-size: 300% 300%;
        mix-blend-mode: color-dodge;
        opacity: 0;
        transition: opacity 0.5s ease-in-out, transform 0.5s ease-in-out;
        animation: holographicMove 3s infinite linear;
        z-index: 1;
        pointer-events: none;
    }

    :global(.light-mode) .hex-container:hover .hex-sticker::before {
        opacity: 0.6;
    }

    @keyframes holographicMove {
        0% {
            background-position: 0% 0%;
        }
        50% {
            background-position: 100% 100%;
        }
        100% {
            background-position: 0% 0%;
        }
    }
</style>
