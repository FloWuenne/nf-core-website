---
import HexSticker from "./HexSticker.astro";

interface StickerData {
    imageUrl: string;
    alt: string;
    category: string;
    link?: string;
}

interface Props {
    stickers: StickerData[];
}

const { stickers } = Astro.props;

// Get unique categories for filter options
const categories = [...new Set(stickers.map((sticker) => sticker.category))].sort();
---

<div class="hex-gallery-container">
    <div class="controls">
        <select class="category-filter" id="categoryFilter">
            <option value="all">All Categories</option>
            {categories.map((category) => <option value={category}>{category}</option>)}
        </select>
    </div>

    <div class="hex-gallery" id="hexGallery">
        {
            stickers.map((sticker) => (
                <HexSticker
                    imageUrl={sticker.imageUrl}
                    alt={sticker.alt}
                    category={sticker.category}
                    link={sticker.link}
                />
            ))
        }
    </div>
</div>

<style>
    .hex-gallery-container {
        width: 100%;
        padding: 1rem;
    }

    .controls {
        display: flex;
        justify-content: center;
        margin-bottom: 2rem;
        flex-wrap: wrap;
    }

    .category-filter {
        cursor: pointer;
        padding: 10px 20px;
        background: var(--theme-btn-bg, #fff);
        color: var(--theme-btn-text, #222);
        border: solid 1px var(--theme-accent, #1a9655);
        border-radius: 5px;
        font-size: 16px;
        outline: none;
        appearance: none;
        transition:
            background 0.3s ease,
            color 0.3s ease;
        min-width: 200px;
    }

    .category-filter:hover {
        background: var(--theme-btn-hover-bg, #f0f0f0);
    }

    .category-filter {
        position: relative;
        background-image: var(
            --select-arrow,
            url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="%231a9655"><path d="M7 10l5 5 5-5H7z"/></svg>')
        );
        background-repeat: no-repeat;
        background-position: right 10px center;
        background-size: 24px;
        padding-right: 30px;
    }

    .hex-gallery {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        --hex-size: 150px;
        --hex-margin: 0.5rem;
    }

    /* Staggered hexagon layout */
    .hex-gallery::before {
        content: "";
        width: calc(var(--hex-size) / 2 + var(--hex-margin));
        float: left;
        height: 120%;
        shape-outside: repeating-linear-gradient(
            transparent 0 calc(var(--f, calc(1.732 * var(--hex-size) + 4 * var(--hex-margin) - 1px)) - 3px),
            #000 0 var(--f, calc(1.732 * var(--hex-size) + 4 * var(--hex-margin) - 1px))
        );
    }

    /* Hover effects for the gallery */
    .hex-gallery:hover .hex-container:not(:hover) {
        opacity: 0.6;
        filter: grayscale(0.3);
        transform: scale(0.95);
    }

    .hex-gallery .hex-container {
        transition:
            opacity 0.3s ease,
            filter 0.3s ease,
            transform 0.3s ease;
    }

    .hex-gallery .hex-container:hover {
        z-index: 10;
        position: relative;
    }

    /* Light mode styles */
    :global(body.light-mode) .category-filter {
        background: var(--theme-btn-bg-light, #160f25);
        color: var(--theme-btn-text-light, #fff);
    }

    :global(body.light-mode) .category-filter {
        background-image: var(
            --select-arrow-light,
            url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="%23FFFFFF"><path d="M7 10l5 5 5-5H7z"/></svg>')
        );
        background-repeat: no-repeat;
        background-position: right 10px center;
        background-size: 24px;
    }
</style>

<script>
    // Category filter functionality
    const categoryFilter = document.getElementById("categoryFilter");

    categoryFilter?.addEventListener("change", (e) => {
        const target = e.target as HTMLSelectElement;
        const selectedCategory = target.value;
        localStorage.setItem("selectedCategory", selectedCategory);

        // Filter stickers
        const stickers = document.querySelectorAll(".hex-container");
        stickers.forEach((sticker) => {
            const stickerCategory = sticker.getAttribute("data-category");
            if (selectedCategory === "all" || stickerCategory === selectedCategory) {
                (sticker as HTMLElement).style.display = "inline-block";
            } else {
                (sticker as HTMLElement).style.display = "none";
            }
        });
    });

    // Apply saved category filter on page load
    document.addEventListener("DOMContentLoaded", () => {
        const savedCategory = localStorage.getItem("selectedCategory") || "all";
        if (categoryFilter) {
            (categoryFilter as HTMLSelectElement).value = savedCategory;

            // Trigger change event to apply filter
            const event = new Event("change");
            categoryFilter.dispatchEvent(event);
        }
    });
</script>
