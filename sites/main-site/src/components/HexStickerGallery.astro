---
import HexSticker from "./HexSticker.astro";
import StickerModal from "./StickerModal.astro";
import HexGrid from "./HexGrid.astro";

interface StickerData {
    imageUrl: string;
    alt: string;
    category: string;
    link?: string;
    description?: string;
}

interface Props {
    stickers: StickerData[];
}

const { stickers } = Astro.props;

// Get unique categories while preserving the order they first appear in the stickers array
const uniqueCategories = [...new Set(stickers.map((sticker) => sticker.category))];

// Group stickers by category
const stickersByCategory = uniqueCategories.reduce(
    (acc, category) => {
        acc[category] = stickers.filter((sticker) => sticker.category === category);
        return acc;
    },
    {} as Record<string, StickerData[]>,
);

// Function to format category name for display
function formatCategoryName(category: string): string {
    // Ensure all category names end with "Stickers"
    const baseName = category.charAt(0).toUpperCase() + category.slice(1);
    return baseName.endsWith("Stickers") ? baseName : `${baseName} Stickers`;
}

// Create category IDs for navigation
const categoryIds = uniqueCategories.map((category) => ({
    id: `category-${category}`,
    name: formatCategoryName(category),
}));
---

<div class="w-100 p-2">
    <!-- Category navigation bar removed -->

    {
        uniqueCategories.map((category, index) => (
            <div class="category-section" id={`category-${category}`}>
                <h2 class="category-heading mb-4">
                    {formatCategoryName(category)}
                    <a href="#top" class="back-to-top ms-2" title="Back to top">
                        <svg
                            xmlns="http://www.w3.org/2000/svg"
                            width="16"
                            height="16"
                            fill="currentColor"
                            class="bi bi-arrow-up-circle"
                            viewBox="0 0 16 16"
                        >
                            <path
                                fill-rule="evenodd"
                                d="M1 8a7 7 0 1 0 14 0A7 7 0 0 0 1 8zm15 0A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-7.5 3.5a.5.5 0 0 1-1 0V5.707L5.354 7.854a.5.5 0 1 1-.708-.708l3-3a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1-.708.708L8.5 5.707V11.5z"
                            />
                        </svg>
                    </a>
                </h2>
                <HexGrid class="hex-gallery" id={`hexGallery-${category}`} data-category={category}>
                    {stickersByCategory[category].map((sticker) => (
                        <HexSticker
                            imageUrl={sticker.imageUrl}
                            alt={sticker.alt}
                            category={sticker.category}
                            link={sticker.link}
                            description={sticker.description}
                        />
                    ))}
                </HexGrid>
                {index < uniqueCategories.length - 1 && <hr class="category-divider my-4" />}
            </div>
        ))
    }
</div>

<!-- Include the sticker modal component -->
<StickerModal />

<style>
    /* Category navigation styles removed */

    .category-heading {
        text-align: center;
        font-size: 1.75rem;
        font-weight: 600;
        color: var(--bs-body-color);
        margin-top: 3rem; /* Consistent top margin */
        display: flex;
        align-items: center;
        justify-content: center;
    }

    /* First category heading should have less top margin */
    .category-section:first-child .category-heading {
        margin-top: 1rem;
    }

    .back-to-top {
        opacity: 0.5;
        transition: opacity 0.3s ease;
        color: var(--bs-body-color);
    }

    .back-to-top:hover {
        opacity: 1;
    }

    .category-divider {
        border-color: var(--bs-border-color);
        width: 50%;
        margin-left: auto;
        margin-right: auto;
    }

    .category-divider:last-child {
        display: none;
    }

    .hex-gallery {
        --hex-size: 187.5px; /* Base size for large screens */
        --hex-margin: 0.5rem;
        --hex-gap: 1rem;
        padding-bottom: 2rem; /* Consistent bottom padding */
    }

    /* Responsive sizing for different screen sizes */
    @media (max-width: 1200px) {
        .hex-gallery {
            --hex-size: 175px;
        }
    }

    @media (max-width: 992px) {
        .hex-gallery {
            --hex-size: 150px;
        }
    }

    @media (max-width: 768px) {
        .hex-gallery {
            --hex-size: 125px;
        }
    }

    @media (max-width: 576px) {
        .hex-gallery {
            --hex-size: 100px;
            --hex-gap: 0.5rem;
        }
    }

    /* Hover effects for the gallery */
    .hex-gallery:hover .hex-container:not(:hover) {
        opacity: 0.7; /* Less dramatic fade (changed from 0.55) */
        filter: grayscale(0.25); /* Reduced grayscale effect (from 0.4) */
        transform: scale(0.95); /* Less shrinking (from 0.9) */
        transition: all 0.6s ease; /* Slower, simpler transition (from 0.4s cubic-bezier) */
    }

    .hex-gallery .hex-container {
        transition:
            opacity 0.6s ease,
            /* Slower, simpler transition (from 0.4s cubic-bezier) */ filter 0.6s ease,
            transform 0.6s ease,
            /* Removed bounce effect for smoother transition */ box-shadow 0.6s ease;
        will-change: transform; /* Optimize for animations */
    }

    .hex-gallery .hex-container:hover {
        z-index: 10;
        transform: scale(1.1) rotate(1deg); /* Reduced scale and rotation (from 1.18 and 3deg) */
        filter: brightness(1.05) contrast(1.02) saturate(1.05); /* Reduced filter effects */
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2); /* Lighter shadow (from 12px 24px 0.3) */
    }

    /* Add alternating tilt directions for more natural feel */
    .hex-gallery .hex-container:nth-child(even):hover {
        transform: scale(1.1) rotate(-1deg); /* Reduced scale and rotation (from 1.18 and -3deg) */
    }
</style>
